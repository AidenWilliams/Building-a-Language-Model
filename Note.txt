Test Uni Grams
s   1
a   3
b   2
c   5
d   3
e   1
f   1
/s  1
Bi grams

<text id="parl1">
<p id="0">
<s id="0">
I	null	null	null
am	null	null	null
Sam	null	null	null
</s>
<s id="1">
Sam	null	null	null
I	null	null	null
am	null	null	null
</s>
<s id="2">
I	null	null	null
do	null	null	null
not	null	null	null
like	null	null	null
green	null	null	null
eggs	null	null	null
and	null	null	null
ham	null	null	null
</s>
</p>
</text>


~~MONKEY~~
#%%
probs = train_corpus.Model(n=1, model='unk').probabilities

count = 0
for gram in probs:
    count += probs[gram]

print(count)

n, bins, patches = plt.hist(probs.values(), 100, facecolor='blue', alpha=0.5)
plt.show()
#%%

unigram = OrderedDict()
bigram = OrderedDict()
trigram = OrderedDict()
interpolation = OrderedDict()
# make these sorted
for n in tqdm(params["n"]):
    for model in params["model"]:
        testgrams = test_corpus.NGram(n=n,model=model)['count']
        probabilities = {}
        for gram in testgrams:
            probabilities[gram] = train_corpus.GetProbability(input=gram,n=n,model=model)

        sorted_tuples = sorted(probabilities.items(), key=operator.itemgetter(1))

        title = ''
        if n == 1:
            unigram[model] = {}
            for k, v in sorted_tuples:
                unigram[model][k] = v
            # unigram[model] = probabilities
        elif n == 2:
            bigram[model] = {}
            for k, v in sorted_tuples:
                bigram[model][k] = v
            # bigram[model] = probabilities
        else:
            trigram[model] = {}
            for k, v in sorted_tuples:
                trigram[model][k] = v
            # trigram[model] = probabilities

        if n == 3:
            interpolations = {}

            for gram in testgrams:
                interpolations[gram] = train_corpus.LinearInterpolation(trigram=gram, model=model)
            sorted_tuples = sorted(interpolations.items(), key=operator.itemgetter(1))
            interpolation[model] = {}
            for k, v in sorted_tuples:
                interpolation[model][k] = v
            #interpolation[model] = interpolations


#%%

#%%

test = Model(probabilities=bigram['vanilla'], n=2, model='vanilla')

#%%

print(test.Perplexity())
print(test_corpus.Model().Perplexity())

#%%

# Print 5 tables as shown in pdf

heading =   "\t\t|Unigram\t\t|\tBigram\t\t\t|\tTrigram\t\t\t|\tLinear  Interpolation"
line =  "************************************************************************************************************"\
        "******************"

data_template =     "Vanilla\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\n" \
                    "Laplace\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\n" \
                    "UNK\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%\t|\t{}:{:.1f}%"


for i in range(min(len(unigram["unk"]), 5)):
    i = -i
    print(heading)
    print(line)
    print(data_template.format(
            " ".join([f'{x[:5]:<5}' for x in list(unigram["vanilla"].keys())[i]]), (unigram["vanilla"][list(unigram["vanilla"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(bigram["vanilla"].keys())[i]]), (bigram["vanilla"][list(bigram["vanilla"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(trigram["vanilla"].keys())[i]]), (trigram["vanilla"][list(trigram["vanilla"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(interpolation["vanilla"].keys())[i]]), (interpolation["vanilla"][list(interpolation["vanilla"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(unigram["laplace"].keys())[i]]), (unigram["laplace"][list(unigram["laplace"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(bigram["laplace"].keys())[i]]), (bigram["laplace"][list(bigram["laplace"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(trigram["laplace"].keys())[i]]), (trigram["laplace"][list(trigram["laplace"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(interpolation["laplace"].keys())[i]]), (interpolation["laplace"][list(interpolation["laplace"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(unigram["unk"].keys())[i]]), (unigram["unk"][list(unigram["unk"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(bigram["unk"].keys())[i]]), (bigram["unk"][list(bigram["unk"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(trigram["unk"].keys())[i]]), (trigram["unk"][list(trigram["unk"].keys())[i]]) * 100,
            " ".join([f'{x[:5]:<5}' for x in list(interpolation["unk"].keys())[i]]), (interpolation["unk"][list(interpolation["unk"].keys())[i]]) * 100))
    print(line)

#%%

# do generations here

#%%

#print(Corpus(test,verbose=True).Model(n=2).Perplexity())

#%% md


<s id="1">
Sam	null	null	null
I	null	null	null
am	null	null	null
</s>
<s id="2">
I	null	null	null
do	null	null	null
not	null	null	null
like	null	null	null
green	null	null	null
eggs	null	null	null
and	null	null	null
ham	null	null	null
</s>

help(NGramModel)
#%%

LM = LanguageModel(corpus="Corpus/", verbose=True)

#%%

LM.Perplexity(n=3, verbose=True)

#%%

generated = LM.GenerateSentence(n=1, verbose=True)
for w in generated:
    print(w, end=' ')

print(".")

#%%

generated = LM.GenerateSentence(verbose=True)
for w in generated:
    print(w, end=' ')

print(".")

#%%

generated = LM.GenerateSentence(n=3, verbose=True)
for w in generated:
    print(w, end=' ')

print(".")

#%%

generated = LM.GenerateSentence(n=4, verbose=True)
for w in generated:
    print(w, end=' ')

print(".")
#%%

x = tuple(['x', 'y', 'z'])
x[:3-1]
